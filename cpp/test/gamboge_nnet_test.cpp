#include "gamboge/nnet.h"
#include <iostream>
#include <iomanip>

// test weights for a 6-3-1 neural network

void
test_631( )
{
	static const float test_wts[] = {
		// b->h1          i1->h1         i2->h1         i3->h1         i4->h1         i5->h1         i6->h1
		  6.31414733F,   0.65097616F,   9.57090502F,   0.09918807F,   0.34747524F,  -0.22119165F,  -1.46227569F,
		// b->h2          i1->h2         i2->h2         i3->h2         i4->h2         i5->h2         i6->h2
		 -2.90137623F,   5.28471412F, -18.85611073F,  -1.23064304F,   0.67967101F,  -0.52377262F,   2.18077394F,
		// b->h3          i1->h3         i2->h3         i3->h3         i4->h3         i5->h3         i6->h3
		  2.73558004F,   1.84685605F,  -1.34649983F,   9.83496163F,  -8.08858473F,   1.23608243F, -11.48135362F,
		// b->o           h1->o          h2->o          h3->o
		 -3.51048773F,  -7.08398606F,  11.45778956F, -19.95901352F
	};

	static const float test_inputs[][6] = {
		{  0.37182781F, -0.8311404F,  0.4259828F, -1.4220337F,  0.18336578F, -2.2287368F },
		{  0.54980689F, -0.8311404F,  1.0703898F, -0.5883251F,  0.18336578F, -1.0588553F },
		{ -1.06745579F,  1.5445350F, -0.7493098F,  1.1007028F, -1.06960449F,  0.6201034F },
		{  0.09560690F, -0.6512472F, -0.7493098F,  0.3154891F,  0.08288661F,  0.6201034F },
		{ -2.43320564F,  2.5265420F, -0.4770242F,  1.2647570F, -1.09247945F,  0.5813455F },
		{ -1.81966033F,  1.3682108F, -0.4770242F,  1.2093380F, -1.01113866F,  0.5813455F },
		{ -0.67703554F, -0.7889860F, -0.4770242F,  0.4291913F,  0.13391541F,  0.5813455F },
		{ -0.39566591F, -0.7031708F, -0.7544150F,  0.2704232F,  0.04057550F,  0.6718149F }
	};

	static const float expected_outputs[] = {
		0.00000e+00F,
		0.00000e+00F,
		2.50535e-05F,
		9.96561e-01F,
		2.50535e-05F,
		2.50535e-05F,
		9.99381e-01F,
		9.98889e-01F
	};

	static const unsigned num_tests = sizeof( expected_outputs ) / sizeof( expected_outputs[0] );

	for ( int k = 0; k < num_tests; ++k )
	{
		float nn_out;
		gamboge::neural_network( &(test_inputs[k][0]), test_wts, &nn_out, 6u, 3u, 1u );
		std::cout << std::setprecision( 6 ) << std::fixed;
		std::cout << "6-3-1 run " << std::setw(2) << k << ":";
		std::cout << " result=" << nn_out;
		std::cout << ", expected=" << expected_outputs[k];
		std::cout << std::endl;
	}
}

void
test_401( )
{
	static const float test_wts[] = {
		// b->o       i1->o       i2->o       i3->o       i4->o
		-9.4901225, -0.5395784, -9.6753797,  1.0895243,  3.6650984
	};

	static const float test_inputs[][4] = {
		{ -0.83638000,  1.4406183,  1.21881787, -0.6954536 },
		{ -0.16695752, -0.4571630,  0.49415471,  0.2791840 },
		{ -1.62121159,  1.8090129,  1.23154908, -0.6814068 },
		{  0.17093160, -0.4927326,  0.30788361,  0.2837385 },
		{ -0.22653423, -0.4298198,  0.49677294,  0.2722555 },
		{  0.66061738, -1.1081710,  0.04838508,  0.7728001 },
		{  0.21095275, -1.0817353,  0.08174114,  0.7239140 },
		{  0.87116492,  0.2232204, -0.71509675,  1.7736242 },
		{ -0.30781280,  1.3631414,  1.33035419, -0.6831863 },
		{  0.82633441, -1.0674974,  0.18075591,  0.7414785 },
		{  0.12074911, -0.4390876,  0.43781737,  0.2839241 },
		{ -0.09052777, -1.0472056,  0.16986429,  0.6990467 },
		{  0.50332536, -1.1700071,  0.04751599,  0.7509881 },
		{ -1.98464059,  1.6235278,  1.25255915, -0.6738787 },
		{ -0.32927230, -0.4948581,  0.43185059,  0.2810888 }
	};

	static const float expected_outputs[] = {
		0.00000000, 0.03182442, 0.00000000, 0.03108046, 0.02484037,
		0.97725724, 0.97351996, 0.00166123, 0.00000000, 0.96466742,
		0.02211115, 0.96887073, 0.98741733, 0.00000000, 0.04636288
	};

	static const unsigned num_tests = sizeof( expected_outputs ) / sizeof( expected_outputs[0] );

	for ( int k = 0; k < num_tests; ++k )
	{
		float nn_out;
		gamboge::neural_network( &(test_inputs[k][0]), test_wts, &nn_out, 4u, 0u, 1u,
			gamboge::logistic_output<float>() );
		std::cout << "4-0-1 run " << std::setw(2) << k << ":";
		std::cout << std::setprecision( 6 ) << std::fixed;
		std::cout << " result=" << nn_out;
		std::cout << ", expected=" << expected_outputs[k];
		std::cout << std::endl;
	}
}

void
gamboge_nnet_runtests( )
{
	test_631( );
	test_401( );
}